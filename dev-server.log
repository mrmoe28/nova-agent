
> novaagent@0.1.0 dev
> next dev

   ▲ Next.js 15.5.5
   - Local:        http://localhost:3000
   - Network:      http://192.168.1.245:3000
   - Environments: .env.local, .env

 ✓ Starting...
 ✓ Ready in 7.3s
 ○ Compiling /api/projects ...
 ✓ Compiled /api/projects in 3.7s (298 modules)
prisma:query SELECT "public"."Project"."id", "public"."Project"."clientName", "public"."Project"."address", "public"."Project"."phone", "public"."Project"."email", "public"."Project"."status", "public"."Project"."createdAt", "public"."Project"."updatedAt", COALESCE("aggr_selection_0_Bill"."_aggr_count_bills", 0) AS "_aggr_count_bills", COALESCE("aggr_selection_1_BOMItem"."_aggr_count_bomItems", 0) AS "_aggr_count_bomItems" FROM "public"."Project" LEFT JOIN (SELECT "public"."Bill"."projectId", COUNT(*) AS "_aggr_count_bills" FROM "public"."Bill" WHERE 1=1 GROUP BY "public"."Bill"."projectId") AS "aggr_selection_0_Bill" ON ("public"."Project"."id" = "aggr_selection_0_Bill"."projectId") LEFT JOIN (SELECT "public"."BOMItem"."projectId", COUNT(*) AS "_aggr_count_bomItems" FROM "public"."BOMItem" WHERE 1=1 GROUP BY "public"."BOMItem"."projectId") AS "aggr_selection_1_BOMItem" ON ("public"."Project"."id" = "aggr_selection_1_BOMItem"."projectId") WHERE 1=1 ORDER BY "public"."Project"."updatedAt" DESC OFFSET $1
Error fetching projects: Error [PrismaClientUnknownRequestError]: 
Invalid `prisma.project.findMany()` invocation:


Error occurred during query execution:
ConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: "0A000", message: "cached plan must not change result type", severity: "ERROR", detail: None, column: None, hint: None }), transient: false })
    at async GET (src/app/api/projects/route.ts:6:22)
  4 | export async function GET() {
  5 |   try {
> 6 |     const projects = await prisma.project.findMany({
    |                      ^
  7 |       orderBy: { updatedAt: "desc" },
  8 |       include: {
  9 |         bills: { {
  clientVersion: '6.17.1'
}
 GET /api/projects 500 in 7363ms
prisma:query SELECT "public"."Project"."id", "public"."Project"."clientName", "public"."Project"."address", "public"."Project"."phone", "public"."Project"."email", "public"."Project"."status", "public"."Project"."createdAt", "public"."Project"."updatedAt", COALESCE("aggr_selection_0_Bill"."_aggr_count_bills", 0) AS "_aggr_count_bills", COALESCE("aggr_selection_1_BOMItem"."_aggr_count_bomItems", 0) AS "_aggr_count_bomItems" FROM "public"."Project" LEFT JOIN (SELECT "public"."Bill"."projectId", COUNT(*) AS "_aggr_count_bills" FROM "public"."Bill" WHERE 1=1 GROUP BY "public"."Bill"."projectId") AS "aggr_selection_0_Bill" ON ("public"."Project"."id" = "aggr_selection_0_Bill"."projectId") LEFT JOIN (SELECT "public"."BOMItem"."projectId", COUNT(*) AS "_aggr_count_bomItems" FROM "public"."BOMItem" WHERE 1=1 GROUP BY "public"."BOMItem"."projectId") AS "aggr_selection_1_BOMItem" ON ("public"."Project"."id" = "aggr_selection_1_BOMItem"."projectId") WHERE 1=1 ORDER BY "public"."Project"."updatedAt" DESC OFFSET $1
Error fetching projects: Error [PrismaClientUnknownRequestError]: 
Invalid `prisma.project.findMany()` invocation:


Error occurred during query execution:
ConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: "0A000", message: "cached plan must not change result type", severity: "ERROR", detail: None, column: None, hint: None }), transient: false })
    at async GET (src/app/api/projects/route.ts:6:22)
  4 | export async function GET() {
  5 |   try {
> 6 |     const projects = await prisma.project.findMany({
    |                      ^
  7 |       orderBy: { updatedAt: "desc" },
  8 |       include: {
  9 |         bills: { {
  clientVersion: '6.17.1'
}
 GET /api/projects 500 in 1229ms
prisma:query SELECT 1
prisma:query SELECT "public"."Project"."id", "public"."Project"."clientName", "public"."Project"."address", "public"."Project"."phone", "public"."Project"."email", "public"."Project"."status", "public"."Project"."createdAt", "public"."Project"."updatedAt", COALESCE("aggr_selection_0_Bill"."_aggr_count_bills", 0) AS "_aggr_count_bills", COALESCE("aggr_selection_1_BOMItem"."_aggr_count_bomItems", 0) AS "_aggr_count_bomItems" FROM "public"."Project" LEFT JOIN (SELECT "public"."Bill"."projectId", COUNT(*) AS "_aggr_count_bills" FROM "public"."Bill" WHERE 1=1 GROUP BY "public"."Bill"."projectId") AS "aggr_selection_0_Bill" ON ("public"."Project"."id" = "aggr_selection_0_Bill"."projectId") LEFT JOIN (SELECT "public"."BOMItem"."projectId", COUNT(*) AS "_aggr_count_bomItems" FROM "public"."BOMItem" WHERE 1=1 GROUP BY "public"."BOMItem"."projectId") AS "aggr_selection_1_BOMItem" ON ("public"."Project"."id" = "aggr_selection_1_BOMItem"."projectId") WHERE 1=1 ORDER BY "public"."Project"."updatedAt" DESC OFFSET $1
prisma:query SELECT "public"."Bill"."id", "public"."Bill"."fileName", "public"."Bill"."fileType", "public"."Bill"."ocrText", "public"."Bill"."extractedData", "public"."Bill"."uploadedAt", "public"."Bill"."projectId" FROM "public"."Bill" WHERE "public"."Bill"."projectId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Analysis"."id", "public"."Analysis"."projectId", "public"."Analysis"."monthlyUsageKwh", "public"."Analysis"."peakDemandKw", "public"."Analysis"."averageCostPerKwh", "public"."Analysis"."annualCostUsd", "public"."Analysis"."recommendations", "public"."Analysis"."createdAt" FROM "public"."Analysis" WHERE "public"."Analysis"."projectId" IN ($1) OFFSET $2
prisma:query SELECT "public"."System"."id", "public"."System"."projectId", "public"."System"."solarPanelCount", "public"."System"."solarPanelWattage", "public"."System"."totalSolarKw", "public"."System"."batteryKwh", "public"."System"."batteryType", "public"."System"."inverterKw", "public"."System"."inverterType", "public"."System"."backupDurationHrs", "public"."System"."criticalLoadKw", "public"."System"."estimatedCostUsd", "public"."System"."createdAt" FROM "public"."System" WHERE "public"."System"."projectId" IN ($1) OFFSET $2
prisma:query SELECT "public"."BOMItem"."id", "public"."BOMItem"."projectId", "public"."BOMItem"."category", "public"."BOMItem"."itemName", "public"."BOMItem"."manufacturer", "public"."BOMItem"."modelNumber", "public"."BOMItem"."quantity", "public"."BOMItem"."unitPriceUsd", "public"."BOMItem"."totalPriceUsd", "public"."BOMItem"."sourceUrl", "public"."BOMItem"."notes" FROM "public"."BOMItem" WHERE "public"."BOMItem"."projectId" IN ($1) ORDER BY "public"."BOMItem"."category" ASC OFFSET $2
prisma:query SELECT "public"."Plan"."id", "public"."Plan"."projectId", "public"."Plan"."necChecks", "public"."Plan"."warnings", "public"."Plan"."installSteps", "public"."Plan"."timeline", "public"."Plan"."laborHoursEst", "public"."Plan"."permitNotes", "public"."Plan"."finalPdfPath", "public"."Plan"."createdAt" FROM "public"."Plan" WHERE "public"."Plan"."projectId" IN ($1) OFFSET $2
 GET /api/projects 200 in 563ms
prisma:query INSERT INTO "public"."Project" ("id","clientName","address","phone","email","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."Project"."id", "public"."Project"."clientName", "public"."Project"."address", "public"."Project"."phone", "public"."Project"."email", "public"."Project"."status", "public"."Project"."createdAt", "public"."Project"."updatedAt"
 POST /api/projects 200 in 367ms
prisma:query SELECT "public"."Project"."id", "public"."Project"."clientName", "public"."Project"."address", "public"."Project"."phone", "public"."Project"."email", "public"."Project"."status", "public"."Project"."createdAt", "public"."Project"."updatedAt", COALESCE("aggr_selection_0_Bill"."_aggr_count_bills", 0) AS "_aggr_count_bills", COALESCE("aggr_selection_1_BOMItem"."_aggr_count_bomItems", 0) AS "_aggr_count_bomItems" FROM "public"."Project" LEFT JOIN (SELECT "public"."Bill"."projectId", COUNT(*) AS "_aggr_count_bills" FROM "public"."Bill" WHERE 1=1 GROUP BY "public"."Bill"."projectId") AS "aggr_selection_0_Bill" ON ("public"."Project"."id" = "aggr_selection_0_Bill"."projectId") LEFT JOIN (SELECT "public"."BOMItem"."projectId", COUNT(*) AS "_aggr_count_bomItems" FROM "public"."BOMItem" WHERE 1=1 GROUP BY "public"."BOMItem"."projectId") AS "aggr_selection_1_BOMItem" ON ("public"."Project"."id" = "aggr_selection_1_BOMItem"."projectId") WHERE 1=1 ORDER BY "public"."Project"."updatedAt" DESC OFFSET $1
prisma:query SELECT "public"."Bill"."id", "public"."Bill"."fileName", "public"."Bill"."fileType", "public"."Bill"."ocrText", "public"."Bill"."extractedData", "public"."Bill"."uploadedAt", "public"."Bill"."projectId" FROM "public"."Bill" WHERE "public"."Bill"."projectId" IN ($1,$2) OFFSET $3
prisma:query SELECT "public"."Analysis"."id", "public"."Analysis"."projectId", "public"."Analysis"."monthlyUsageKwh", "public"."Analysis"."peakDemandKw", "public"."Analysis"."averageCostPerKwh", "public"."Analysis"."annualCostUsd", "public"."Analysis"."recommendations", "public"."Analysis"."createdAt" FROM "public"."Analysis" WHERE "public"."Analysis"."projectId" IN ($1,$2) OFFSET $3
prisma:query SELECT "public"."System"."id", "public"."System"."projectId", "public"."System"."solarPanelCount", "public"."System"."solarPanelWattage", "public"."System"."totalSolarKw", "public"."System"."batteryKwh", "public"."System"."batteryType", "public"."System"."inverterKw", "public"."System"."inverterType", "public"."System"."backupDurationHrs", "public"."System"."criticalLoadKw", "public"."System"."estimatedCostUsd", "public"."System"."createdAt" FROM "public"."System" WHERE "public"."System"."projectId" IN ($1,$2) OFFSET $3
prisma:query SELECT "public"."BOMItem"."id", "public"."BOMItem"."projectId", "public"."BOMItem"."category", "public"."BOMItem"."itemName", "public"."BOMItem"."manufacturer", "public"."BOMItem"."modelNumber", "public"."BOMItem"."quantity", "public"."BOMItem"."unitPriceUsd", "public"."BOMItem"."totalPriceUsd", "public"."BOMItem"."sourceUrl", "public"."BOMItem"."notes" FROM "public"."BOMItem" WHERE "public"."BOMItem"."projectId" IN ($1,$2) ORDER BY "public"."BOMItem"."category" ASC OFFSET $3
prisma:query SELECT "public"."Plan"."id", "public"."Plan"."projectId", "public"."Plan"."necChecks", "public"."Plan"."warnings", "public"."Plan"."installSteps", "public"."Plan"."timeline", "public"."Plan"."laborHoursEst", "public"."Plan"."permitNotes", "public"."Plan"."finalPdfPath", "public"."Plan"."createdAt" FROM "public"."Plan" WHERE "public"."Plan"."projectId" IN ($1,$2) OFFSET $3
 GET /api/projects 200 in 340ms
prisma:query SELECT 1
prisma:query SELECT "public"."Project"."id", "public"."Project"."clientName", "public"."Project"."address", "public"."Project"."phone", "public"."Project"."email", "public"."Project"."status", "public"."Project"."createdAt", "public"."Project"."updatedAt", COALESCE("aggr_selection_0_Bill"."_aggr_count_bills", 0) AS "_aggr_count_bills", COALESCE("aggr_selection_1_BOMItem"."_aggr_count_bomItems", 0) AS "_aggr_count_bomItems" FROM "public"."Project" LEFT JOIN (SELECT "public"."Bill"."projectId", COUNT(*) AS "_aggr_count_bills" FROM "public"."Bill" WHERE 1=1 GROUP BY "public"."Bill"."projectId") AS "aggr_selection_0_Bill" ON ("public"."Project"."id" = "aggr_selection_0_Bill"."projectId") LEFT JOIN (SELECT "public"."BOMItem"."projectId", COUNT(*) AS "_aggr_count_bomItems" FROM "public"."BOMItem" WHERE 1=1 GROUP BY "public"."BOMItem"."projectId") AS "aggr_selection_1_BOMItem" ON ("public"."Project"."id" = "aggr_selection_1_BOMItem"."projectId") WHERE 1=1 ORDER BY "public"."Project"."updatedAt" DESC OFFSET $1
prisma:query SELECT "public"."Bill"."id", "public"."Bill"."fileName", "public"."Bill"."fileType", "public"."Bill"."ocrText", "public"."Bill"."extractedData", "public"."Bill"."uploadedAt", "public"."Bill"."projectId" FROM "public"."Bill" WHERE "public"."Bill"."projectId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Analysis"."id", "public"."Analysis"."projectId", "public"."Analysis"."monthlyUsageKwh", "public"."Analysis"."peakDemandKw", "public"."Analysis"."averageCostPerKwh", "public"."Analysis"."annualCostUsd", "public"."Analysis"."recommendations", "public"."Analysis"."createdAt" FROM "public"."Analysis" WHERE "public"."Analysis"."projectId" IN ($1) OFFSET $2
prisma:query SELECT "public"."System"."id", "public"."System"."projectId", "public"."System"."solarPanelCount", "public"."System"."solarPanelWattage", "public"."System"."totalSolarKw", "public"."System"."batteryKwh", "public"."System"."batteryType", "public"."System"."inverterKw", "public"."System"."inverterType", "public"."System"."backupDurationHrs", "public"."System"."criticalLoadKw", "public"."System"."estimatedCostUsd", "public"."System"."createdAt" FROM "public"."System" WHERE "public"."System"."projectId" IN ($1) OFFSET $2
prisma:query SELECT "public"."BOMItem"."id", "public"."BOMItem"."projectId", "public"."BOMItem"."category", "public"."BOMItem"."itemName", "public"."BOMItem"."manufacturer", "public"."BOMItem"."modelNumber", "public"."BOMItem"."quantity", "public"."BOMItem"."unitPriceUsd", "public"."BOMItem"."totalPriceUsd", "public"."BOMItem"."sourceUrl", "public"."BOMItem"."notes" FROM "public"."BOMItem" WHERE "public"."BOMItem"."projectId" IN ($1) ORDER BY "public"."BOMItem"."category" ASC OFFSET $2
prisma:query SELECT "public"."Plan"."id", "public"."Plan"."projectId", "public"."Plan"."necChecks", "public"."Plan"."warnings", "public"."Plan"."installSteps", "public"."Plan"."timeline", "public"."Plan"."laborHoursEst", "public"."Plan"."permitNotes", "public"."Plan"."finalPdfPath", "public"."Plan"."createdAt" FROM "public"."Plan" WHERE "public"."Plan"."projectId" IN ($1) OFFSET $2
 GET /api/projects 200 in 326ms
 ⚠ Found a change in next.config.ts. Restarting the server to apply the changes...
   ▲ Next.js 15.5.5
   - Local:        http://localhost:3000
   - Network:      http://192.168.1.245:3000
   - Environments: .env.local, .env

 ✓ Starting...
 ✓ Ready in 6.9s
 ⚠ Found a change in next.config.ts. Restarting the server to apply the changes...
   ▲ Next.js 15.5.5
   - Local:        http://localhost:3000
   - Network:      http://192.168.1.245:3000
   - Environments: .env.local, .env

 ✓ Starting...
 ✓ Ready in 7.8s
