// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(cuid())
  clientName  String
  address     String?
  phone       String?
  email       String?
  status      String   @default("intake") // intake, analysis, sizing, bom, plan, review, complete
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bills       Bill[]
  analysis    Analysis?
  system      System?
  bomItems    BOMItem[]
  plan        Plan?
}

model Bill {
  id            String   @id @default(cuid())
  projectId     String
  fileName      String
  fileType      String   // pdf, image, csv
  filePath      String
  uploadedAt    DateTime @default(now())
  ocrText       String?
  extractedData String?  // JSON string

  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Analysis {
  id                 String   @id @default(cuid())
  projectId          String   @unique
  monthlyUsageKwh    Float
  peakDemandKw       Float?
  averageCostPerKwh  Float
  annualCostUsd      Float
  recommendations    String   // JSON string
  createdAt          DateTime @default(now())

  project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model System {
  id                String   @id @default(cuid())
  projectId         String   @unique
  solarPanelCount   Int
  solarPanelWattage Int
  totalSolarKw      Float
  batteryKwh        Float
  batteryType       String   // lithium, lead-acid
  inverterKw        Float
  inverterType      String
  backupDurationHrs Int
  criticalLoadKw    Float
  estimatedCostUsd  Float
  createdAt         DateTime @default(now())

  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model BOMItem {
  id            String  @id @default(cuid())
  projectId     String
  category      String  // solar, battery, inverter, mounting, electrical
  itemName      String
  manufacturer  String?
  modelNumber   String
  quantity      Int
  unitPriceUsd  Float
  totalPriceUsd Float
  sourceUrl     String?
  notes         String?

  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Plan {
  id              String   @id @default(cuid())
  projectId       String   @unique
  necChecks       String   // JSON array of checks
  warnings        String?  // JSON array of warnings
  installSteps    String   // JSON array of steps
  timeline        String?
  laborHoursEst   Float?
  permitNotes     String?
  finalPdfPath    String?
  createdAt       DateTime @default(now())

  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Distributor {
  id              String      @id @default(cuid())
  name            String
  contactName     String?
  email           String?
  phone           String?
  website         String?
  address         String?
  notes           String?
  logoUrl         String?     // Company logo
  rating          Float?      // Average rating 0-5
  shippingInfo    String?     // Shipping policies
  paymentTerms    String?     // Payment terms
  lastScrapedAt   DateTime?   // Last time scraped
  scrapeMetadata  String?     // JSON metadata from scraping
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  equipment       Equipment[]
  scrapeHistory   ScrapeHistory[]

  @@index([name])
  @@index([website])
}

model Equipment {
  id              String      @id @default(cuid())
  distributorId   String
  category        String      // solar, battery, inverter, mounting, electrical, other
  name            String
  manufacturer    String?
  modelNumber     String
  description     String?
  specifications  String?     // JSON string for detailed specs
  unitPrice       Float
  imageUrl        String?
  dataSheetUrl    String?
  sourceUrl       String?     // Original product page URL
  rating          Float?      // Product rating 0-5
  reviewCount     Int?        // Number of reviews
  warranty        String?     // Warranty information
  isActive        Boolean     @default(true)
  inStock         Boolean     @default(true)
  leadTimeDays    Int?
  lastScrapedAt   DateTime?   // Last time this product was scraped
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  distributor     Distributor @relation(fields: [distributorId], references: [id], onDelete: Cascade)

  @@index([distributorId])
  @@index([category])
  @@index([modelNumber])
  @@index([manufacturer])
}

// Track scraping history for auditing and debugging
model ScrapeHistory {
  id              String      @id @default(cuid())
  distributorId   String
  url             String      // URL that was scraped
  status          String      // success, partial, failed
  itemsFound      Int         @default(0)
  itemsSaved      Int         @default(0)
  errorMessage    String?
  metadata        String?     // JSON metadata
  scrapedAt       DateTime    @default(now())

  distributor     Distributor @relation(fields: [distributorId], references: [id], onDelete: Cascade)

  @@index([distributorId])
  @@index([scrapedAt])
}
